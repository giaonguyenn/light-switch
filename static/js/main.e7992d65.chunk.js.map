{"version":3,"sources":["components/Container/LightSwitch.js","components/Container/Light.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["BasicLightSwitch","onChange","type","AdvanceLightSwitch","class","LightSwitch","switchType","BasicLight","isLightSwitchOn","className","AdvanceLight","Light","Container","handleOnChange","switchMode","setState","isBasicSwitchOn","isAdvanceSwitchOn","state","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAQMA,EAAmB,SAAAC,GAAQ,OAC/B,2BAAOC,KAAK,WAAWD,SAAU,kBAAMA,QAGnCE,EAAqB,SAAAF,GAAQ,OACjC,2BAAOG,MAAM,UACX,2BAAOF,KAAK,WAAWD,SAAU,kBAAMA,OACvC,0BAAMG,MAAM,mBAIDC,EAjBK,SAAC,GAA8B,IAA5BJ,EAA2B,EAA3BA,SACrB,MAAsB,UAD0B,EAAjBK,WAE3BN,EAAiBC,GACjBE,EAAmBF,ICKnBM,G,MAAa,SAAAC,GAAe,OAChC,uBAAGC,UAAWD,EAAkB,UAAY,YAA5C,WAGIE,EAAe,SAAAF,GAAe,OAClC,yBACEC,UAAS,wBAAmBD,EAAkB,UAAY,eAI/CG,EAhBD,SAAC,GAAqC,IAAnCH,EAAkC,EAAlCA,gBACf,MAAsB,UAD2B,EAAjBF,WAE5BC,EAAWC,GACXE,EAAaF,IC+CJI,E,YAjDb,aAAe,IAAD,8BACZ,+CAQFC,eAAiB,SAACP,EAAYQ,GAC5B,MAAsB,UAAfR,EACH,EAAKS,SAAS,CACZC,iBAAkBF,IAEpB,EAAKC,SAAS,CACZE,mBAAoBH,KAZ1B,EAAKI,MAAQ,CACXF,iBAAiB,EACjBC,mBAAmB,GALT,E,sEAmBJ,IAAD,SACwCE,KAAKD,MAA5CF,EADD,EACCA,gBAAiBC,EADlB,EACkBA,kBAEzB,OACE,yBAAKR,UAAU,oBACb,yBAAKA,UAAU,gBACb,kDACA,kBAAC,EAAD,CACER,SAAU,WACR,EAAKY,eAAe,QAASG,IAE/BV,WAAY,UAEd,kBAAC,EAAD,CAAOE,gBAAiBQ,EAAiBV,WAAY,WAEvD,yBAAKG,UAAU,kBACb,yDACA,kBAAC,EAAD,CACER,SAAU,WACR,EAAKY,eAAe,UAAWI,IAEjCX,WAAY,YAEd,kBAAC,EAAD,CAAOE,gBAAiBS,EAAmBX,WAAY,kB,GA3CzCc,aCSTC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7992d65.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst LightSwitch = ({ onChange, switchType }) => {\r\n  return switchType === \"basic\"\r\n    ? BasicLightSwitch(onChange)\r\n    : AdvanceLightSwitch(onChange);\r\n};\r\n\r\nconst BasicLightSwitch = onChange => (\r\n  <input type=\"checkbox\" onChange={() => onChange()} />\r\n);\r\n\r\nconst AdvanceLightSwitch = onChange => (\r\n  <label class=\"switch\">\r\n    <input type=\"checkbox\" onChange={() => onChange()} />\r\n    <span class=\"slider round\"></span>\r\n  </label>\r\n);\r\n\r\nexport default LightSwitch;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst Light = ({ isLightSwitchOn, switchType }) => {\r\n  return switchType === \"basic\"\r\n    ? BasicLight(isLightSwitchOn)\r\n    : AdvanceLight(isLightSwitchOn);\r\n};\r\n\r\nconst BasicLight = isLightSwitchOn => (\r\n  <p className={isLightSwitchOn ? \"lightOn\" : \"lightOff\"}>Light</p>\r\n);\r\n\r\nconst AdvanceLight = isLightSwitchOn => (\r\n  <div\r\n    className={`advance-light ${isLightSwitchOn ? \"lightOn\" : \"lightOff\"}`}\r\n  ></div>\r\n);\r\n\r\nexport default Light;\r\n","import React, { Component } from \"react\";\r\nimport LightSwitch from \"./LightSwitch\";\r\nimport Light from \"./Light\";\r\n\r\nclass Container extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isBasicSwitchOn: false,\r\n      isAdvanceSwitchOn: false\r\n    };\r\n  }\r\n\r\n  handleOnChange = (switchType, switchMode) => {\r\n    return switchType === \"basic\"\r\n      ? this.setState({\r\n          isBasicSwitchOn: !switchMode\r\n        })\r\n      : this.setState({\r\n          isAdvanceSwitchOn: !switchMode\r\n        });\r\n  };\r\n\r\n  render() {\r\n    const { isBasicSwitchOn, isAdvanceSwitchOn } = this.state;\r\n\r\n    return (\r\n      <div className=\"switch-container\">\r\n        <div className=\"basic-switch\">\r\n          <h2>Basic Light Switch</h2>\r\n          <LightSwitch\r\n            onChange={() => {\r\n              this.handleOnChange(\"basic\", isBasicSwitchOn);\r\n            }}\r\n            switchType={\"basic\"}\r\n          />\r\n          <Light isLightSwitchOn={isBasicSwitchOn} switchType={\"basic\"} />\r\n        </div>\r\n        <div className=\"advance-switch\">\r\n          <h2>More Advance Light Switch</h2>\r\n          <LightSwitch\r\n            onChange={() => {\r\n              this.handleOnChange(\"advance\", isAdvanceSwitchOn);\r\n            }}\r\n            switchType={\"advance\"}\r\n          />\r\n          <Light isLightSwitchOn={isAdvanceSwitchOn} switchType={\"advance\"} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Container from \"./components/Container/\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}